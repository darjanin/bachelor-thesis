1.1 First steps to the Sass
1.1.1 History
Sass (Syntaticly awesome stylesheet) is meta-language created on top of CSS. It’s main purpose is to provide more
enhanced features to the CSS that are useful for creating manageable stylesheets. It was originally created by Hampton
Catling (http://www.hamptoncatlin.com/). He and Nathan Weizenbaum (http://nex-3.com/) designed Sass through 2.0
version. Nathan is the primary designer of Sass and the main developer since its inception. In late 2008 joined the Sass
team Chris Eppstein (http://chriseppstein.github.com/). Chris and Nathan designed Sass from version 2.2. Another
accomplishment of Chris is the Compass (http://compass-style.org/), the first Sass-based framework. I am going to
talk about it in next chapters, too.
The official implementation is done in Ruby. And through this manual I will be using only this one. There are at-
tempts to make Sass interpreter in Javascript so you can run it on the server with Node.js or PHP version named PHP-
Sass (http://www.phpsass.com/). Sass is available under the MIT License (http://sass-lang.com/docs/yardoc/file.MIT-
LICENSE.html).
1.1.2 Installation
Now after few words from history is time to move on. Before we can start with the syntax, it’s necessary to install
the Sass interpreter. How I said before we will be using Ruby implementation. And because we have many operating
systems with different dependencies I will write give you hints how to prepare your system.
Windows
The Windows does not come with Ruby installed at default. The fastest way how to install it is to download RubyIn-
staller (http://rubyinstaller.org/downloads/). When it is done, go to Start Menu, Accessories and run Command Prompt.
But faster would be to press Win+R and put in the cmd command and press Run. Next step is same for all platforms.
Linux
This category is more general, while there are many distribution with Linux kernel. But the most used systems today
have roots in Debian. In this group you can add Debian, Ubuntu, Linux Mint and so on. If you are using Arch, then I
don’t think think you need to read how to install Ruby.
For Debian based systems you just need to start Terminal and run in it
2
Tutorial to Compass and SASS Documentation, Release 0.2
sudo apt-get install ruby1.9.1
It will ask your password and after that it will install Ruby.
MacOS X
Todo
This text possibly will be rewritten cause I figure out that on Mac is old version of Ruby.
Your new Mac comes with Ruby installed. So only thing that you must do is to find your terminal. You can use
Spotlight and write in it Terminal. And run it.
Last step
At the end to install the Sass gem just write following command into the terminal or command prompt. When the
installation ends, you are done.
gem install sass
1.1.3 Hello World example
It’s good idea to try if it works. Run in terminal:
sass --scss
Your input would be
$header-color: #fe3242;
h1 {
color: $header-color;
}
And when you are done press Ctrl+D. You should get
h1 {
color: #fe3242;
}
How can you see, the line starting with dollar sign disappeared and the color value has changed to value defined for
$header-color. This is simple example of using variables in Sass. When there was no problems you can move to the
next chapter.
1.2 Sass Syntax
After details how to setup up your working environment for Sass, it’s time to move on to the syntax of this language.
How I said earlier anything written in CSS is valid Sass code. It’s not always true. The thing is that Sass has two
possible syntaxes. The older one, called simply Sass with extension .sass, takes inspiration in Haml (http://haml.info/).
There are no semicolons, no curly brackets and few more differences from style that will be used. The important thing
in it is using indention. If you met with languages like Ruby or Python, than you understand. For people who have no
clue about what I’m talking is here small example.
1.2. Sass Syntax
3
Tutorial to Compass and SASS Documentation, Release 0.2
First is the code in Sass (.sass extension)
#main
background: red;
color: white
a
font:
weight: bold
size: 2em
family: serif
color: yellow
&:hover
color: green
And now CSS equivalent to code above.
#main {
background: red;
color: white;
}
#main a {
font-weight: bold;
font-size: 2em;
font-family: serif;
color: yellow;
}
#main a:hover {
color: green;
}
This approach to the syntax has some advantages and if you have some experience with languages where indention is
so important than go for it. But in this materials I will be using most often the SCSS (Sassy CSS) syntax. It’s more
similar to CSS so there would be no problems to start using Sass, what is main purpose of this tutorial.
1.2.1 Variables
How often happened to you that you were writing CSS, in which you need to set up color for some element, but you
don’t remember the code of used color? You can still find it in document, but it could take some time. Or another
example. You got some code at which had worked some other developer and only thing that you need to do is to
change colors of all links in the document. The problem is that you don’t know in how many declarations is that
colored used in document and how we can see later, code written in Sass is often spited in many files. If the previous
developer used variable to store the color value, than your work would be just to find the declaration of color for link
and change it.
In this example situations variables come to be handy. It’s true that they are often used as constants in Sass. But there
are no problems to change their values later if it needed. But it is no good practice to do so. While than it can start
to be mess and you can not be sure which value is used at the moment so easily. The definition of variable starts with
symbol $ following with the variable name, double-colon and the variable value. The value can be color code in any
format supported in CSS, string, number or length with unit.
$color-var-name: rgba(42,42,42,1);
$length-var-name: 960px;
$string-var-name: "|";
$number: 0.2;
#main {
width: $length-var-name
1.2. Sass Syntax
4
Tutorial to Compass and SASS Documentation, Release 0.2
}
a {
color: $color-var-name;
opacity: $number;
}
#main {
width: 960px;
}
a {
color: rgba(42,42,42,1);
opacity: 0.2;
}
Note: Naming conventions They are inherited from CSS. The name for variable should be created from alphanumeric
symbols and separated by hyphen. The name should say enough about the value that is saved in it. Try to avoid
names like $red-color and than use it for all your links. Better approach is to create some color scheme like $red:
#E03838;,than create $link-color: $red; and use it for links. If you came to state that you need to change the color from
red to green, you will just declare $green and set the $link-color to it. It’s better, because if you stay with $red-color,
than you will probably change the value stored in $red-color to green and it does not make sense.
1.2.2 Nesting
I’d like to start with simple CSS code for horizontal navigation.
nav
nav
nav
nav
nav
{ position: absolute; right: 5em; bottom: 2em; }
ul { list-style: none; }
ul li { display: inline; }
ul li a { color: #4590DE; text-decoration: none; }
ul li a:hover { text-decoration: underline; }
You probably met with similar code. If you look at it you can see that I repeated some selectors. In final style they
are important, but when you are writing code, you don’t want to repeat yourself. Computers are good for repetitive
work so why don’t use them for this too? Sass has solution for this. It’s called nesting. And it’s main idea is that child
elements are written inside of the parent curly brackets. So than I can rewrite the CSS code into.
nav {
position: absolute;
right: 5em;
bottom: 2em;
ul {
list-style: none;
li {
display: inline;
a {
color: #4590DE;
text-decoration: none;
&:hover {
text-decoration: underline;
}
}
}
}
}
1.2. Sass Syntax
5
Tutorial to Compass and SASS Documentation, Release 0.2
The indention in code is not important, but it’s recommended, for easier reading of the code. How you can see I didn’t
repeat any selector. And there is interesting syntax with the ampersand. &:hover. The ampersand stands for the parent
selector. The reason why I didn’t used it for previous declaration is that it’s added there automatically. So if you write
nav {
ul {
}
}
it can be rewritten using &-syntax to
nav {
& ul {
}
}
We need to refer on the parent selector in case that there is no need for space between selectors. For example when we
use pseudo-selectors. Or if there is class which we want to style if it’s for some specific selector.
table {
&.users-mode {
}
}
will be translated to
table { }
table.users-mode {
}
There is one more way where to use nesting. And it’s for CSS properties. Some of them are created with some prefix
like font-, text-, border-,etc. and if you are going to set more of them you can use the short version, but sometimes you
need to specify it more explicit. And than comes nesting handy. The example would be best for it.
.block {
border: {
width: thin thin 0 0;
color: red blue;
style: solid;
}
}
.block {
border-width: thin thin 0 0;
border-color: red blue;
border-style: solid;
}
1.2.3 SassScript
Extra features that you don’t find in CSS brings the SassScript. It allows to use arithmetic operations, interpolation
and some extra functions. If you want to just try some of it without writing files, than for you is there Interactive Shell.
sass -i
>> 1px + 1px + 1px
3px
>> #123 - #010101
1.2. Sass Syntax
6
Tutorial to Compass and SASS Documentation, Release 0.2
#122334
>> #777 + #888
white
Data types
The SassScript supports 6 data types. There is no need to declare them. It will be automatically done. They are
• numbers, e.g. 1.2, 13, 10px
• strings with and without quotes, e.g. “cube”, ‘triangle’, line
• colors, e.g. red, #123456, rgba(234,123,0, 0.8)
• booleans, e.g. true, false
• null
• list of values separated by spaces or commas, e.g. thin solid black
You don’t need thing about these types a lot. Only in cases that you store for example string into variable, but you
want to use it to set a size of font. In this case it doesn’t make sense.
Todo
rethink this section if it’s important. many of these things are used if you write your own mixins.
1.2.4 @-rules and directives
Sass supports all CSS @-rules like @import, @media or @font-face, but some of them extend and gives them more
power.
@import
With import rule you will meet often using Sass. It extends CSS import rule, so you can import .scss and .sass files.
The output will be merged into one single CSS file and all variables and mixins defined in the imported files will be
available in the main file. With this behavior you can split your styles into smaller files defining specific elements. It
makes easy to append or edit the code.
There are some special circumstances at which will the @import rule works like the CSS.
• The file’s extension is .css.
• The filename begins with http://.
• If the filename is url().
• If the @import has any media queries.
@import "cube.css";
@import "cube" screen;
@import "http://cube.edu/style";
@import url(cube);
@import "cube.css";
@import "cube" screen;
@import "http://cube.edu/style";
@import url(cube);
1.2. Sass Syntax
7
Tutorial to Compass and SASS Documentation, Release 0.2
If we want to import the file cube.scss we can write:
@import "cube.scss";
or just simply:
‘@import "cube";‘
If you want to import more files, it’s possible to write:
@import "first", "second";
If you name the .scss file with underscore before filename _cube.scss, than it’s code will be added to the main .css file.
But it will be not compiled to CSS at own. In @import you don’t need to write the underscore, but it’s important that in
the same folder can not be more files with the same name. (If in folder is cube.scss, than you can not use _cube.scss).
ano? .. todo:
at this point I need to make some example files and test how it would behave.
1.2.5 Mixins
Some of many advantages of Sass is keeping your code readable and don’t repeating yourself. For the DRY (don’t
repeat yourself) exists mixins. If you work with programming languages before, you can say that they look like
functions. But like many things in Sass comes from Ruby universe, mixins exists there too. The way how mixins work
is to include their code at the place where they were called.
Defining a Mixin with ‘@mixin‘
Mixins are defined with the directive @mixin following with the name of mixin and optionally the arguments. After
that is there a block containing content of mixin closed into curly brackets.
@mixin button {
border: thin solid #40AECA;
background: #85C7D8;
border-radius: 5px;
color: white;
&:hover {
background: #7EB7C6;
}
}
If you try to compile this with sass, than the output will be empty. The reason is that you don’t use the mixin. And the
second thing what you can see at definition of mixin is &:hover. We met with it in nesting, but there we know who is
parent. And here it is similar. At the moment when we call the mixin it would have some parent at that will be used.
For inserting the content of the mixin use @include directive.
.button {
@include button;
height: 30px;
}
.button {
border: thin solid #40AECA;
background: #85C7D8;
border-radius: 5px;
color: white;
height: 30px;
}
1.2. Sass Syntax
8
Tutorial to Compass and SASS Documentation, Release 0.2
.button:hover {
background: #7EB7C6;
}
But this is not all what comes with mixins. I give you example when you need to have same styled buttons, but with
different background colors. You can define the new color after @include button, but there comes some repeating
work. You must always define the new behavior for the hover state too. All because of using different color. How can
we improve it? We can use the arguments that would be passed to the mixin. The best way how to explain it would be
with example.
Say that you want to create three different color buttons. One would be normal with light gray background and would
be for classic actions. Next on would be the error button that has red background and finally information button with
blue background. And we want to define one mixin and then change just colors when we include it.
@mixin button($color) {
border: thin solid $color - #222222;
background: $color;
border-radius: 5px;
color: white;
padding: 5px;
&:hover {
background: $color - #161616;
}
}
.button {
@include button(#B1B1B1);
}
.error-button {
@include button(#FB4242);
}
.info-button {
@include button(#549EE5);
}
.button {
border: thin solid #8f8f8f;
background: #b1b1b1;
border-radius: 5px;
color: white;
padding: 5px; }
.button:hover {
background: #9b9b9b; }
.error-button {
border: thin solid #d92020;
background: #fb4242;
border-radius: 5px;
color: white;
padding: 5px; }
.error-button:hover {
background: #e52c2c; }
.info-button {
border: thin solid #327cc3;
background: #549ee5;
1.2. Sass Syntax
9
Tutorial to Compass and SASS Documentation, Release 0.2
border-radius: 5px;
color: white;
padding: 5px; }
.info-button:hover {
background: #3e88cf; }
1.2.6 Inheritance
1.2. Sass Syntax
10
CHAPTER
TWO
COMPASS FOR ADVENTURER
At this point you should know enough about Sass and what is possible to do in it. There are many ways how to use
it. You can use the approach of writing everything for yourself and only if you need it. There are probably some of
you who always work this way. But many developers want to save so much time that it’s possible so they can start
with another project. They often take some framework, that has the common things written and they just write the new
parts specific for their project. The community about Sass is not different. There is not just one framework that you
can use, but in this tutorial I will talk about the oldest and probably the most used of them. Compass. It’s created by
one of the authors of the Sass.
2.1 Installation
Installation of this framework, so you can use it in your project, is simple enough. The important thing is to have
installed Sass. If you don’t, for some reason, than go to first chapter where is written the guide for installation. Just
put into console following command.:
gem install compass
It will download and set up path to compass files.
Compass creates prepared mixins and functions that extends the functionality

